<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <bean id="fgoFrame" class="fgoScript.entity.panel.FgoFrame" lazy-init="true">
        <property name="wuna" ref="wuna"/>
        <property name="light" ref="light"/>
    </bean>
    <bean id="raid" class="destinyChild.Raid" lazy-init="true">
        <property name="wuna" ref="wuna"/>
        <property name="threadPoolTaskExecutor" ref="poolExecutor"/>
    </bean>
    <bean id="wuna" class="aoshiScript.entity.WuNa" lazy-init="true">
        <constructor-arg value="wuna007"/>
    </bean>
    <bean id="pointInfo" class="fgoScript.constant.PointInfo" factory-method="getInstance">
    </bean>
    <bean id="light" class="destinyChild.Light" lazy-init="true">
        <property name="poolExecutor" ref="poolExecutor"/>
    </bean>

    <!-- 定义切面bean -->
    <bean id="aspect" class="fgoScript.entity.aop.CustomAspect"/>

    <!--<aop:config proxy-target-class="true">-->
        <!--&lt;!&ndash; 引入切面 &ndash;&gt;-->
        <!--<aop:aspect id="aspect" ref="aspect">-->
            <!--&lt;!&ndash; 定义切点 &ndash;&gt;-->
            <!--<aop:pointcut id="say" expression="execution(* aoshiScript.entity.WuNa.*(..))"/>-->
            <!--&lt;!&ndash; 定义通知 &ndash;&gt;-->
            <!--<aop:before method="before" pointcut-ref="say"/>-->
            <!--<aop:after method="after" pointcut-ref="say"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->

        <bean id="poolExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数，默认为1 -->
        <property name="corePoolSize" value="4" />
        <!-- 最大线程数，默认为Integer.MAX_VALUE -->
        <property name="maxPoolSize" value="10" />
        <!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE
            <property name="queueCapacity" value="1000" /> -->
        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
        <property name="keepAliveSeconds" value="300" />
        <!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
        <property name="rejectedExecutionHandler">
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
    </bean>


</beans>